
1，定义结构

id 作为结构体中的字段id，如果为空，则xml标签名作为该字段的id。

type 该元素的类型。可以为基本类型，或自定义类型。

embed 是否内嵌显示。简单类型都是直接显示。
对于复合类型，默认情况下都是显示为链接，如果embed为true，则内嵌显示。

（？让浏览器端可指定是否内嵌显示？）

optional 字段是否为可选的。
当字段是可选的，则它可以被删除。

limit 简单类型的限制。例如整数，可以设置它的取值范围，”min 1 max 10“，
字符串，可以设置它的长度范围，”minlen 1 maxlen 8“。

====
2，基本类型

s 字符串
i 整数
r 实数
b 布尔

vst 虚拟结构（将若干属性作为一个整体显示）
st 结构体
l 列表
m 映射表
lm 映射表，但是键本身也含在元素里（所以元素只能是结构体）。

使用vst，还可以模拟继承（但是“父字段”是作为一组显示的）。

<item typeDef="" type="vst">
	<id type="s"/>
	<name type="s"/>
</item>

<equipment type="vst>
	<base type="item" embed="true" />
	<atk type="r"/>
</equipment>

====
3，自定义类型

含有typeDef属性，则为类型定义。
typeDef的值，为类型的id，如果值为空，则xml标签名作为该类型的id。

类型定义，可以用于定制结构体的字段，列表和映射表的元素类型，
简单类型的默认值，值范围，以及“是否可选”，“是否内嵌显示”，“是否显示为文本框”等。

其它元素可以通过type属性引用自定义类型，
可以设置“是否可选“，”是否内嵌显示“，”是否显示为文本框“，”默认值“等来覆盖自定义类型的设置。

示例：

<xxx typeDef="i_1_10" type="i" value="1" limit="min 1 max 10" label="整数（1到10之间）"/>

上述配置定义了一个新的整数类型，id为”i_1_10“，它的默认值为1，取值范围为1到10。

<a1 label="整数（1到10）" type="i_1_10" value="2"/>

上述配置定义了一个整数属性，它的类型为”i_1_10“，所以它的取值范围为1到10，
但它配置了默认值为2，覆盖了”i_1_10“类型的默认值。

====
4，实体定义

含有idPrefex属性，则为实体类型定义。

实体拥有全局唯一id。
在导出时，每个实体单独一个文件。

实体可以在深层次中定义，但这意味着，该类实体可能在多个列表中。
为了简化，只在根下定义实体。



